datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}


enum UserRole{
  USER
  ADMIN
  SUPERADMIN
}
 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  hashedPassword  String?
  emailVerified DateTime?
  image         String?
  role          UserRole?       @default(USER)   
  posts          Post[]       
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String?
  imageUrl    String?
  publicId    String?
  catName     String?
  category    Category? @relation(fields: [catName], references: [catName])
  author      User      @relation(fields: [authorEmail], references: [email])
  authorEmail String
  links       String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  catName String   @unique
  posts   Post[]
  postIDs String[] @db.ObjectId
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Pdf {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  pdfUrl        String
  publicId      String
  thumbnailUrl     String?   
  thumbnailPublicId String? 
  uploaderEmail String
  uploadedAt    DateTime? @default(now())
}

